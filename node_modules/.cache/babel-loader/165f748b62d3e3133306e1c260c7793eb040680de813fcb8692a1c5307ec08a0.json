{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelwhaley/Desktop/pokeapp/src/pokeGame.js\";\nimport React from \"react\";\nimport Pokedex from \"./pokedex\";\nimport randomPokes from \"./gameShuffle\";\nimport Pokeinfo from \"./pokeInfo\";\n\n/*\nDONE - Modify your component hierarchy so that App renders a component called Pokegame.\n\nPokegame should take your list of 8 pokemon \n-call pokeInfo\n\nand randomly assign them into two hands of 4 cards each\nrandomly assign \n-somehow get 4 random indexes of pokeinfo\nDONE \n-asign to two cards \nDONE\nIt should then render two Pokedex components, one for each hand\ncall pokedex on both hands \n.\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst handOne = randomPokes(Pokeinfo);\nconst handTwo = randomPokes(Pokeinfo);\n\n/*\nNext, have the Pokegame component determine which hand is the “winner,”\n where the winning hand is the one with the higher total experience.\n\n Then modify the Pokedex component one more time so that it accepts a prop of isWinner.\n If the Pokedex is the winning one, it should display the message “THIS HAND WINS!” at the bottom of the deck.\n */\nconst PokeGame = props => {\n  const p1 = /*#__PURE__*/_jsxDEV(Pokedex, {\n    info: handOne\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 16\n  }, this);\n  const p2 = /*#__PURE__*/_jsxDEV(Pokedex, {\n    info: handTwo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 16\n  }, this);\n  props.is = p1 > p2 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"player 1 wins\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 26\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"player 1 wins\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 51\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Player 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" palyer 2 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_c = PokeGame;\nexport default PokeGame;\nvar _c;\n$RefreshReg$(_c, \"PokeGame\");","map":{"version":3,"names":["React","Pokedex","randomPokes","Pokeinfo","jsxDEV","_jsxDEV","Fragment","_Fragment","handOne","handTwo","PokeGame","props","p1","info","fileName","_jsxFileName","lineNumber","columnNumber","p2","is","children","_c","$RefreshReg$"],"sources":["/Users/jaleelwhaley/Desktop/pokeapp/src/pokeGame.js"],"sourcesContent":["import React from \"react\";\nimport Pokedex from \"./pokedex\";\nimport randomPokes from \"./gameShuffle\";\nimport Pokeinfo from \"./pokeInfo\";\n\n\n\n/*\nDONE - Modify your component hierarchy so that App renders a component called Pokegame.\n\nPokegame should take your list of 8 pokemon \n-call pokeInfo\n\nand randomly assign them into two hands of 4 cards each\nrandomly assign \n-somehow get 4 random indexes of pokeinfo\nDONE \n-asign to two cards \nDONE\nIt should then render two Pokedex components, one for each hand\ncall pokedex on both hands \n.\n*/\nconst handOne = randomPokes(Pokeinfo);\nconst handTwo = randomPokes(Pokeinfo);\n\n/*\nNext, have the Pokegame component determine which hand is the “winner,”\n where the winning hand is the one with the higher total experience.\n\n Then modify the Pokedex component one more time so that it accepts a prop of isWinner.\n If the Pokedex is the winning one, it should display the message “THIS HAND WINS!” at the bottom of the deck.\n */\nconst PokeGame = (props) => {\n    const p1 = <Pokedex info={handOne} />\n    const p2 = <Pokedex info={handTwo} />  \n    props.is = p1 > p2 ? <h1>player 1 wins</h1> : <h1>player 1 wins</h1>\n    return (\n        <>\n            <h3> Player 1</h3>    \n            \n        <h3> palyer 2 </h3>\n       \n      </>\n   \n    )\n}\nexport default PokeGame"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,YAAY;;AAIjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAgBA,MAAMC,OAAO,GAAGN,WAAW,CAACC,QAAQ,CAAC;AACrC,MAAMM,OAAO,GAAGP,WAAW,CAACC,QAAQ,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,QAAQ,GAAIC,KAAK,IAAK;EACxB,MAAMC,EAAE,gBAAGP,OAAA,CAACJ,OAAO;IAACY,IAAI,EAAEL;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACrC,MAAMC,EAAE,gBAAGb,OAAA,CAACJ,OAAO;IAACY,IAAI,EAAEJ;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACrCN,KAAK,CAACQ,EAAE,GAAGP,EAAE,GAAGM,EAAE,gBAAGb,OAAA;IAAAe,QAAA,EAAI;EAAa;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,gBAAGZ,OAAA;IAAAe,QAAA,EAAI;EAAa;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EACpE,oBACIZ,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAS;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEtBZ,OAAA;MAAAe,QAAA,EAAI;IAAU;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAEnB,CAAC;AAGT,CAAC;AAAAI,EAAA,GAbKX,QAAQ;AAcd,eAAeA,QAAQ;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}